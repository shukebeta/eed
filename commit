#!/bin/bash

# commit - Apply eed preview changes with a descriptive commit message
# Usage: commit <target-file> "commit message"

set -euo pipefail

# Show help if requested
if [ "${1:-}" = "--help" ] || [ "${1:-}" = "-h" ]; then
    cat << 'EOF'
commit - Apply eed preview changes with a descriptive commit message

Usage: commit <target-file> "commit message"

DESCRIPTION:
  Applies changes from file.eed.preview to the target file and creates
  an atomic git commit with "eed-history:" prefix for easy management.

EXAMPLES:
  commit Button.js "fix validation logic"
  commit src/main.py "add error handling"

SEE ALSO:
  eed --undo    Undo last eed-history commit
EOF
    exit 0
fi

# Validate arguments
TARGET_FILE="${1:-}"
COMMIT_MESSAGE="${2:-}"

if [ -z "$TARGET_FILE" ] || [ -z "$COMMIT_MESSAGE" ]; then
    echo "Usage: commit <target-file> \"commit message\"" >&2
    echo "Example: commit Button.js \"fix validation logic\"" >&2
    echo "Use 'commit --help' for more information" >&2
    exit 1
fi

# Check if we are in a git repository first
if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
    echo "Error: Not in a git repository" >&2
    exit 1
fi

# Check if file has staged changes
if ! git diff --cached --quiet "$TARGET_FILE" 2>/dev/null; then
    # File has staged changes - ready to commit
    echo "Committing staged changes for $TARGET_FILE"
else
    echo "Error: No staged changes for $TARGET_FILE" >&2
    echo "Run 'eed $TARGET_FILE ...' first to make changes" >&2
    exit 1
fi

# Commit the staged changes
git commit -m "eed-history: $COMMIT_MESSAGE" --no-verify

echo "âœ… Changes committed: \"$COMMIT_MESSAGE\""
echo ""
echo "ðŸ’¡ Next time, save steps with: eed -m '$COMMIT_MESSAGE' $TARGET_FILE ..."
echo "  To undo: eed --undo"
