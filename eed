#!/bin/bash

# eed - AI-oriented text editor with preview-confirm workflow
# Provides bulletproof safety guarantees and intelligent automation for AI systems

set -euo pipefail
set +H  # Disable history expansion to prevent ! from causing issues

# --- Configuration ---
REPO_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

source "$REPO_ROOT/lib/eed_common.sh"

# Source git-specific operations
source "$REPO_ROOT/lib/eed_git.sh"

source "$REPO_ROOT/lib/eed_validator.sh"

source "$REPO_ROOT/lib/eed_auto_fix_unescaped_slashes.sh"

# --- Variable Precedence System ---
# Priority: CLI flags > Environment variables > Built-in defaults
#
# CLI Flags:    --debug, --disable-auto-reorder
# Environment:  EED_DEBUG, EED_DISABLE_AUTO_REORDER
# Defaults:     false for all options
#
# Boolean Values: Recommended: true/false (strings). Compatibility: 1/0 also accepted.
# Note: EED_FORCE_OVERRIDE is emergency-only and bypasses all safety checks
DEBUG_MODE="$(parse_boolean "${EED_DEBUG:-false}")"
DISABLE_AUTO_REORDER="$(parse_boolean "${EED_DISABLE_AUTO_REORDER:-false}")"



# --- Argument Parsing ---
# CLI arguments override environment variables
FILE_PATH=""
ED_SCRIPT=""
ED_SCRIPT_PROVIDED=false
COMMIT_MESSAGE=""

while [[ $# -gt 0 ]]; do
    case "$1" in
        --debug)
            DEBUG_MODE=true
            shift
            ;;
        --disable-auto-reorder)
            DISABLE_AUTO_REORDER=true
            shift
            ;;
        -m|--message)
            if [ $# -lt 2 ]; then
                error_exit "Option $1 requires a commit message" 1 true
            fi
            COMMIT_MESSAGE="$2"
            shift 2
            ;;
        --undo)
            handle_undo_command
            ;;
        --help|-h)
            show_help
            exit 0
            ;;
        -)
            # Handle stdin marker as regular argument (Unix standard)
            if [ -z "$FILE_PATH" ]; then
                FILE_PATH="$1"
            elif [ "$ED_SCRIPT_PROVIDED" = false ]; then
                ED_SCRIPT="$1"
                ED_SCRIPT_PROVIDED=true
            else
                error_exit "Too many arguments" 1 true
            fi
            shift
            ;;
        -*)
            error_exit "Unknown option '$1'" 1 true
            ;;
        *)
            if [ -z "$FILE_PATH" ]; then
                FILE_PATH="$1"
            elif [ "$ED_SCRIPT_PROVIDED" = false ]; then
                ED_SCRIPT="$1"
                ED_SCRIPT_PROVIDED=true
            else
                error_exit "Too many arguments" 1 true
            fi
            shift
            ;;
    esac
done

# Validate required arguments
if [ -z "$FILE_PATH" ]; then
    error_exit "File path is required" 1 true
fi

# Handle empty script case first (only for explicitly provided empty string)
if [ "$ED_SCRIPT_PROVIDED" = true ] && [ "$ED_SCRIPT" = "" ]; then
    error_exit "Empty ed script provided" 1 "Please provide valid ed commands to execute"
fi

# Handle stdin input (for missing ED_SCRIPT or explicit '-')
if [ "$ED_SCRIPT" = "-" ] || [ "$ED_SCRIPT_PROVIDED" = false ]; then
    if [ -t 0 ]; then
        error_exit "Ed script is required (provide as argument or via stdin)" 1 true
    fi
    ED_SCRIPT=$(cat)
fi


# Normalize line endings for cross-platform compatibility (Git Bash/Windows)
ED_SCRIPT=$(echo "$ED_SCRIPT" | tr -d '\r')
# Print debug info early if enabled
if [ "$DEBUG_MODE" = true ]; then
    echo "Debug mode: executing ed" >&2
fi


# --- Script Validation ---
if ! validation_result=$(is_ed_script_valid "$ED_SCRIPT"); then
    echo "$validation_result" >&2
    exit 1
fi


# --- STAGE 2: Auto-fix unterminated input blocks (a/c/i) ---
# Stage 2 can safely assume w/q commands exist (guaranteed by Stage 1)
if ! FIXED_SCRIPT=$(detect_and_fix_unterminated_input "$ED_SCRIPT"); then
    exit 1
fi
ED_SCRIPT="$FIXED_SCRIPT"

# --- Smart Dot Protection ---
# Attempt smart dot protection when no_dot_trap indicates potential trap
if ! no_dot_trap "$ED_SCRIPT" >/dev/null; then
    SMART_HANDLED_SCRIPT=$(apply_smart_dot_protection "$ED_SCRIPT" "$FILE_PATH")
    smart_handling_result=$?

    if [ $smart_handling_result -eq 0 ]; then
        ED_SCRIPT="$SMART_HANDLED_SCRIPT"
    fi
    # Note: If smart protection fails, we proceed with original script
fi

# --- EARLY COMMAND VALIDATION ---

# Apply auto-fixing unescaped slashes
if process_and_fix_unescaped_slashes "$ED_SCRIPT"; then
    # Remove trailing newline and update script
    ED_SCRIPT=${FIXED_SCRIPT%$'\n'}
    echo "✅ Successfully auto-fixed ed script syntax" >&2
fi

# --- Log Commands for Analysis ---
log_ed_commands "$ED_SCRIPT"

# Now proceed with normal validation
SCRIPT_TYPE=$(classify_ed_script "$ED_SCRIPT")

# Handle invalid commands immediately (after auto-fixing attempt)
if [ "$SCRIPT_TYPE" = "invalid_command" ]; then
    error_exit "Invalid ed command detected" 1 "Please check your ed script syntax"
fi


# --- Line Number Validation ---
if ! validate_line_ranges "$ED_SCRIPT" "$FILE_PATH"; then
    error_exit "Line number validation failed" 1 "Please check that line numbers exist in the file"
fi

# --- Script Safety Analysis ---
# All scripts now use the safe preview workflow

# --- Automatic Script Reordering for Line Number Safety ---
if [ "$DISABLE_AUTO_REORDER" = "false" ]; then
    # Run reordering and capture its output
    REORDERED_OUTPUT=$(reorder_script "$ED_SCRIPT")
    reorder_status=$?

    # Handle failure case (needs error message)
    if [ $reorder_status -ne 0 ]; then
        [ "$DEBUG_MODE" = true ] && echo "ℹ️ Using original script due to reordering failure" >&2
    else
        # Handle successful reordering case (needs success message + force cancellation)
        if [ "$ED_SCRIPT" != "$REORDERED_OUTPUT" ]; then
            [ "$DEBUG_MODE" = true ] && echo "Debug mode: using reordered script:" >&2
            [ "$DEBUG_MODE" = true ] && echo "$REORDERED_OUTPUT" | sed 's/^/  /' >&2

            # Script was reordered for safety
            [ "$DEBUG_MODE" = true ] && echo "💡 Script reordered for safety" >&2
        fi
    fi

    # Always use the reordering output (whether original, reordered, or fallback)
    ED_SCRIPT="$REORDERED_OUTPUT"
    # Always succeed after reordering (treat as normal operation)
    true
fi


# File creation happens later, after validation passes

# --- STAGE 1: Auto-completion for missing w/q commands ---
# Two-stage pipeline: w/q completion → dot termination
# Stage 1 ensures w/q commands are present, Stage 2 handles dot termination
# Applied AFTER reordering to preserve changes
SCRIPT_TYPE=$(classify_ed_script "$ED_SCRIPT")
if [ "$SCRIPT_TYPE" != "invalid_command" ]; then
    AUTO_COMPLETION_OUTPUT=$(auto_complete_ed_script "$ED_SCRIPT" "$SCRIPT_TYPE")
    AUTO_COMPLETION_STATUS=$(echo "$AUTO_COMPLETION_OUTPUT" | head -n1)
    AUTO_COMPLETED_SCRIPT=$(echo "$AUTO_COMPLETION_OUTPUT" | tail -n+2)

    # Handle auto-completion results
    if [[ "$AUTO_COMPLETION_STATUS" == AUTO_COMPLETED:* ]]; then
        COMPLETION_DETAILS="${AUTO_COMPLETION_STATUS#AUTO_COMPLETED:}"
        [ "$DEBUG_MODE" = true ] && echo "💡 Auto-completed missing ed commands: $COMPLETION_DETAILS" >&2
        ED_SCRIPT="$AUTO_COMPLETED_SCRIPT"
    fi
fi

# --- Ed Execution and Preview Generation ---

# For view-only commands, execute directly without preview
if [ "$SCRIPT_TYPE" = "view_only" ]; then
    if [ "$DEBUG_MODE" = true ]; then
        echo "Debug mode: executing view-only command" >&2
    fi
    printf '%s\n' "$ED_SCRIPT" | ed -s "$FILE_PATH" 2>/dev/null || true
    exit 0
fi

# --- Mode Selection: Git vs Preview ---

# Detect if we're in a git repository
IS_GIT_REPO=false
REPO_ROOT_FOR_FILE=""
if REPO_ROOT_FOR_FILE=$(git -C "$(dirname "$FILE_PATH")" rev-parse --show-toplevel 2>/dev/null); then
    REPO_ROOT_FOR_FILE=$(normalize_git_root "$REPO_ROOT_FOR_FILE")
    IS_GIT_REPO=true
fi

# For modifying commands, choose execution mode
if [ "$IS_GIT_REPO" = true ]; then
    execute_git_mode "$FILE_PATH" "$ED_SCRIPT" "$REPO_ROOT_FOR_FILE" "$COMMIT_MESSAGE" "$DEBUG_MODE"
    exit 0
else
    # Preview mode: Traditional workflow with preview file
    PREVIEW_FILE="${FILE_PATH}.eed.preview"
    execute_preview_mode "$FILE_PATH" "$PREVIEW_FILE" "$ED_SCRIPT" "$IS_GIT_REPO" "$DEBUG_MODE"
fi
