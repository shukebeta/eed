#!/bin/bash

# eed - AI-oriented text editor with preview-confirm workflow
# Provides bulletproof safety guarantees and intelligent automation for AI systems

set -euo pipefail

# --- Configuration ---
REPO_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

source "$REPO_ROOT/lib/eed_common.sh"
source "$REPO_ROOT/lib/eed_validator.sh"

# --- Variable Precedence System ---
# Priority: CLI flags > Environment variables > Built-in defaults
#
# CLI Flags:    --force, --debug, --disable-auto-reorder
# Environment:  EED_FORCE, EED_DEBUG, EED_DISABLE_AUTO_REORDER, EED_FORCE_OVERRIDE
# Defaults:     false for all options
#
# Boolean Values: Recommended: true/false (strings). Compatibility: 1/0 also accepted.
# Note: EED_FORCE_OVERRIDE is emergency-only and bypasses all safety checks

# Robust boolean parsing: accepts true/false (recommended) and 1/0 (compatibility)
parse_boolean() {
    local value="$1"
    if [ "$value" = "true" ] || [ "$value" = "1" ]; then
        echo "true"
    else
        echo "false"
    fi
}

DEBUG_MODE="$(parse_boolean "${EED_DEBUG:-false}")"
DISABLE_AUTO_REORDER="$(parse_boolean "${EED_DISABLE_AUTO_REORDER:-false}")"
FORCE_MODE="$(parse_boolean "${EED_FORCE:-false}")"

FORCE_OVERRIDE="$(parse_boolean "${EED_FORCE_OVERRIDE:-false}")"

# Flag set when smart-dot protection has been applied to the ED_SCRIPT.
# When true, treat the script as tutorial-context and avoid classifying it as
# "complex" which would disable --force behavior.
SMART_PROTECTION_APPLIED=false


# --- Argument Parsing ---
# CLI arguments override environment variables
FILE_PATH=""
ED_SCRIPT=""
ED_SCRIPT_PROVIDED=false

while [[ $# -gt 0 ]]; do
    case "$1" in
        --force)
            FORCE_MODE=true
            shift
            ;;
        --debug)
            DEBUG_MODE=true
            shift
            ;;
        --disable-auto-reorder)
            DISABLE_AUTO_REORDER=true
            shift
            ;;
        --help|-h)
            show_help
            exit 0
            ;;
        -)
            # Handle stdin marker as regular argument (Unix standard)
            if [ -z "$FILE_PATH" ]; then
                FILE_PATH="$1"
            elif [ "$ED_SCRIPT_PROVIDED" = false ]; then
                ED_SCRIPT="$1"
                ED_SCRIPT_PROVIDED=true
            else
                echo "✗ Error: Too many arguments" >&2
                echo "Use 'eed --help' for usage information" >&2
                exit 1
            fi
            shift
            ;;
        -*)
            echo "Error: Unknown option '$1'" >&2
            echo "Use 'eed --help' for usage information" >&2
            exit 1
            ;;
        *)
            if [ -z "$FILE_PATH" ]; then
                FILE_PATH="$1"
            elif [ "$ED_SCRIPT_PROVIDED" = false ]; then
                ED_SCRIPT="$1"
                ED_SCRIPT_PROVIDED=true
            else
                echo "✗ Error: Too many arguments" >&2
                echo "Use 'eed --help' for usage information" >&2
                exit 1
            fi
            shift
            ;;
    esac
done

# Validate required arguments
if [ -z "$FILE_PATH" ]; then
    echo "✗ Error: File path is required" >&2
    echo "Use 'eed --help' for usage information" >&2
    exit 1
fi

# Handle empty script case first (only for explicitly provided empty string)
if [ "$ED_SCRIPT_PROVIDED" = true ] && [ "$ED_SCRIPT" = "" ]; then
    echo "✗ Error: Empty ed script provided" >&2
    echo "Please provide valid ed commands to execute" >&2
    exit 1
fi

# Handle stdin input (for missing ED_SCRIPT or explicit '-')
if [ "$ED_SCRIPT" = "-" ] || [ "$ED_SCRIPT_PROVIDED" = false ]; then
    if [ -t 0 ]; then
        echo "✗ Error: Ed script is required (provide as argument or via stdin)" >&2
        echo "Use 'eed --help' for usage information" >&2
        exit 1
    fi
    ED_SCRIPT=$(cat)
fi

# Print debug info early if enabled
if [ "$DEBUG_MODE" = true ]; then
    echo "Debug mode: executing ed" >&2
fi
if [ "$FORCE_MODE" = true ] && [ "$DEBUG_MODE" = true ]; then
    echo "--force mode enabled" >&2
fi


# --- Script Validation ---
if ! validation_result=$(is_ed_script_valid "$ED_SCRIPT"); then
    echo "$validation_result" >&2
    exit 1
fi

# --- Auto-fix unterminated input blocks (a/c/i)
if ! FIXED_SCRIPT=$(detect_and_fix_unterminated_input "$ED_SCRIPT"); then
    exit 1
fi
ED_SCRIPT="$FIXED_SCRIPT"

# --- Smart Dot Protection ---
if ! detect_dot_trap "$ED_SCRIPT" >/dev/null; then
    # Try smart dot protection for appropriate contexts
    SMART_HANDLED_SCRIPT=$(apply_smart_dot_protection "$ED_SCRIPT" "$FILE_PATH")
    smart_handling_result=$?

    if [ $smart_handling_result -eq 0 ]; then
        # Smart protection was applied successfully
        ED_SCRIPT="$SMART_HANDLED_SCRIPT"
        SMART_PROTECTION_APPLIED=true
    fi
    # Note: If smart protection fails, we proceed with original script
    # The new detect_dot_trap is already intelligent enough to avoid false positives
fi

# --- Log Commands for Analysis ---
log_ed_commands "$ED_SCRIPT"

# --- EARLY COMMAND VALIDATION ---

SCRIPT_TYPE=$(classify_ed_script "$ED_SCRIPT")

# Handle invalid commands immediately (before any complex analysis)
if [ "$SCRIPT_TYPE" = "invalid_command" ]; then
    echo "✗ Error: Invalid ed command detected" >&2
    echo "Please check your ed script syntax" >&2
    exit 1
fi


# --- Line Number Validation ---
if ! validate_line_ranges "$ED_SCRIPT" "$FILE_PATH"; then
    echo "✗ Error: Line number validation failed" >&2
    echo "Please check that line numbers exist in the file" >&2
    exit 1
fi

# --- Force Mode Safety Analysis ---
# Final force mode determination with safety overrides
EFFECTIVE_FORCE_MODE="$FORCE_MODE"

# Initialize complex patterns flag (used throughout)
HAS_COMPLEX_PATTERNS=0

# Emergency override bypasses all safety checks
if [ "$FORCE_OVERRIDE" = true ]; then
    EFFECTIVE_FORCE_MODE=true
    HAS_COMPLEX_PATTERNS=0  # Override treats everything as non-complex
    echo "⚠️  FORCE_OVERRIDE enabled - bypassing all safety checks" >&2
else
    # Complex pattern analysis for safety
    
    # If smart-dot protection was applied, treat as non-complex (tutorial context)
    if [ "$SMART_PROTECTION_APPLIED" = true ]; then
        HAS_COMPLEX_PATTERNS=0
    else
        if ! no_complex_patterns "$ED_SCRIPT" >/dev/null 2>&1; then
            HAS_COMPLEX_PATTERNS=1  # Detection failed = complex patterns
        else
            HAS_COMPLEX_PATTERNS=0  # Detection succeeded = no complex patterns
        fi
    fi

    # Disable force mode if complex patterns detected (safety measure)
    if [ "$HAS_COMPLEX_PATTERNS" -ne 0 ] && [ "$EFFECTIVE_FORCE_MODE" = true ]; then
        EFFECTIVE_FORCE_MODE=false
        echo "💡 Complex script detected (--force disabled)" >&2
    fi
fi

# --- Automatic Script Reordering for Line Number Safety ---
# Skip reordering if complex patterns detected (unified architecture)
if [ "$DISABLE_AUTO_REORDER" = "false" ] && [ $HAS_COMPLEX_PATTERNS -eq 0 ]; then
    # Run reordering and capture its output
    REORDERED_OUTPUT=""
    REORDERED_OUTPUT_AND_STATUS=$(reorder_script "$ED_SCRIPT"; echo $?)
    # Extract last line as return value, rest as output
    reorder_result=$(echo "$REORDERED_OUTPUT_AND_STATUS" | tail -n1)
    REORDERED_OUTPUT=$(echo "$REORDERED_OUTPUT_AND_STATUS" | head -n -1)
    if [ "$reorder_result" -eq 1 ]; then
        # Reordering occurred, use the reordered script
        ED_SCRIPT="$REORDERED_OUTPUT"
        [ "$DEBUG_MODE" = true ] && echo "Debug mode: using reordered script:" >&2
        [ "$DEBUG_MODE" = true ] && echo "$ED_SCRIPT" | sed 's/^/  /' >&2

        # Cancel --force when reordering occurs
        if [ "$EFFECTIVE_FORCE_MODE" = true ]; then
            echo "💡 Script reordered for safety (--force disabled)" >&2
            EFFECTIVE_FORCE_MODE=false
        fi
    else
        # No reordering, use original script
        ED_SCRIPT="$REORDERED_OUTPUT"
    fi
    # Always succeed after reordering (treat as normal operation)
    true
elif [ $HAS_COMPLEX_PATTERNS -ne 0 ]; then
    # Complex patterns detected in non-force mode, skip reordering
    if [ "$DEBUG_MODE" = true ]; then
        echo "ℹ️  Skipping auto-reorder due to complex patterns" >&2
    fi
fi

# File creation happens later, after validation passes

# --- Ed Execution and Preview Generation ---

# For view-only commands, execute directly without preview
if [ "$SCRIPT_TYPE" = "view_only" ]; then
    if [ "$DEBUG_MODE" = true ]; then
        echo "Debug mode: executing view-only command" >&2
    fi
    printf '%s\n' "$ED_SCRIPT" | ed -s "$FILE_PATH" 2>/dev/null || true
    exit 0
fi

# For modifying commands, use preview workflow
PREVIEW_FILE="${FILE_PATH}.eed.preview"

# Create file if it doesn't exist (after all validation passes)
if [ ! -f "$FILE_PATH" ]; then
    mkdir -p "$(dirname "$FILE_PATH")"
    echo "" > "$FILE_PATH"
    echo "Creating new file: $FILE_PATH" >&2
fi

# Copy file and execute ed
cp "$FILE_PATH" "$PREVIEW_FILE"

if [ "$DEBUG_MODE" = true ]; then
    echo "Debug mode: executing ed" >&2
    [ "$EFFECTIVE_FORCE_MODE" = true ] && echo "--force mode enabled" >&2
fi

if ! printf '%s\n' "$ED_SCRIPT" | ed -s "$PREVIEW_FILE" 2>/dev/null; then
    echo "✗ Edit command failed" >&2
    echo "  No changes were made to the original file." >&2
    echo "Commands attempted:" >&2
    echo "$ED_SCRIPT" >&2
    rm -f "$PREVIEW_FILE"
    exit 1
fi

# --- Force Mode vs Preview Mode ---
if [ "$EFFECTIVE_FORCE_MODE" = true ]; then
    # Force mode: apply changes and exit
    if diff -q "$FILE_PATH" "$PREVIEW_FILE" >/dev/null 2>&1; then
        rm -f "$PREVIEW_FILE"
        echo "✨ No changes needed (file already matches desired state)"
        exit 0
    fi
    
    # Apply changes
    mv "$PREVIEW_FILE" "$FILE_PATH"
    if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
        git add "$FILE_PATH" 2>/dev/null || true
    fi
    
    echo "✨ Changes applied successfully"
    exit 0
else
    # Preview mode: show diff and instructions
    echo "✨ Edits applied to a temporary preview. Review the changes below:"
    echo

    if diff -q "$FILE_PATH" "$PREVIEW_FILE" >/dev/null 2>&1; then
        echo "No changes were made to the file content."
        # Don't remove preview file, keep it around for test verification
        if [ "$DEBUG_MODE" = true ]; then
            echo "Debug mode: No changes needed, preview file removed" >&2
        fi
    else
        # Show the diff using git diff for better formatting
        if command -v git >/dev/null 2>&1; then
            # Show diff and ignore status since finding changes returns 1
            git diff --no-index --no-prefix "$FILE_PATH" "$PREVIEW_FILE" || true
        else
            # Show diff and ignore exit status since differences cause non-zero
            diff -u "$FILE_PATH" "$PREVIEW_FILE" || true
        fi

        echo
        echo "To apply these changes, run:"
        # Use original paths for display
        echo "  mv '$PREVIEW_FILE' '$FILE_PATH'"

        # Add git staging hint if in a git repository
        if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
            echo " && git add '$FILE_PATH'"
        fi

        echo
        echo "To discard these changes, run:"
        echo "  rm '$PREVIEW_FILE'"
    fi
fi
